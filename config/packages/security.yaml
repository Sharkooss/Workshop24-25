security:
    # Définition des hashers
    password_hashers:
        App\Entity\Users:
            algorithm: auto

    # Définition des fournisseurs d'utilisateurs
    providers:
        app_user_provider:
            entity:
                class: App\Entity\Users
                property: email_users # Utilise email_users comme identifiant

    firewalls:
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false

        main:
            lazy: true
            provider: app_user_provider
            form_login:
                login_path: app_login
                check_path: app_login
                username_parameter: email_users # Utilise email_users pour le login
                password_parameter: password
            logout:
                path: app_logout
                target: /

when@test:
    security:
        password_hashers:
            # By default, password hashers are resource intensive and take time. This is
            # important to generate secure password hashes. In tests however, secure hashes
            # are not important, waste resources and increase test times. The following
            # reduces the work factor to the lowest possible values.
            Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface:
                algorithm: auto
                cost: 4 # Lowest possible value for bcrypt
                time_cost: 3 # Lowest possible value for argon
                memory_cost: 10 # Lowest possible value for argon
